"""
Example of an ADFLOW problem that gave negative volumes and locked up on writing the failed meshes.
"""
import os

from six import iteritems

import numpy as np

from openmdao.api import Problem, Group
from openmdao.core.driver import Driver
from openmdao.parallel_api import PETScVector

from amd_om.design.design_group import DesignGroup
from amd_om.design.utils.flight_conditions import get_flight_conditions
from amd_om.utils.aircraft_data.CRM_full_scale import get_aircraft_data

from amd_om.utils.pre_setup import aeroOptions, meshOptions


class MyDriver(Driver):

    def run(self):
        print("Design Vars (Scaled)")
        dvs = self.get_design_var_values()
        for name, value in iteritems(dvs):
            print(name, value)

        super(MyDriver, self).run()


flight_conditions = get_flight_conditions()
aircraft_data = get_aircraft_data()

aeroOptions = {'gridFile' : '../Plugins/amd_om/grids/L3_myscaled.cgns',
               'writesurfacesolution' : False,
               'writevolumesolution' : True,
               'writetecplotsurfacesolution' : False,
               'grad_scaler' : 10.,
               'outputDirectory' : './'
               }
meshOptions = {'gridFile' : '../Plugins/amd_om/grids/L3_myscaled.cgns'}

design_variables = ['shape', 'twist', 'sweep', 'area']

prob = Problem()
prob.driver = MyDriver()
model = prob.model = Group()

design_group = DesignGroup(
    flight_conditions=flight_conditions, aircraft_data=aircraft_data,
    aeroOptions=aeroOptions, meshOptions=meshOptions, design_variables=design_variables,
)

model.add_subsystem('design_group', design_group, promotes=['*'])

prob.setup(vector_class=PETScVector)

for j in range(1):

    initial_dvs = {}
    initial_dvs['shape'] = np.array([-0.04662834,  0.07430876,  0.05834815,  0.09286085,  0.05564659,
                                     -0.07457096,  0.0682962 , -0.15561768, -0.07721008, -0.13999448,
                                     -0.12878543, -0.01919174,  0.02549131, -0.01638467, -0.05483904,
                                     -0.10412926, -0.09161432, -0.11813937,  0.029549  ,  0.0341767 ,
                                     0.03472737,  0.0512648 ,  0.05053346,  0.02397213, -0.00362281,
                                     -0.01617732,  0.00383129,  0.18394024,  0.02505508,  0.05516776,
                                     0.0859491 ,  0.08478072,  0.0720003 ,  0.05450775,  0.07553015,
                                     0.03626321,  0.03903686,  0.06198669,  0.03287903,  0.07397385,
                                     0.10392839,  0.13542354,  0.12744342,  0.07431339,  0.04297602,
                                     0.02257801,  0.02462588,  0.06618251,  0.05157857,  0.10036582,
                                     -0.03692506, -0.01667296, -0.00572917,  0.01472252,  0.02506754,
                                     0.04007519,  0.04689695,  0.01469126, -0.02736669, -0.16408646,
                                     -0.03285657, -0.13549842, -0.13307846, -0.149128  , -0.17423858,
                                     -0.13365487, -0.10793318, -0.06283733, -0.08103276, -0.11662902,
                                     -0.14572707, -0.15899664, -0.01308289,  0.02536595,  0.05300747,
                                     0.06359554,  0.06654881,  0.0430814 , -0.04002294,  0.01812602,
                                     0.05020873,  0.06250822,  0.05961067,  0.04326905, -0.04627608,
                                     0.02208587,  0.03392147,  0.03310992,  0.04498096,  0.04333192,
                                     -0.0202512 ,  0.03483533,  0.03697102,  0.03278861,  0.04524346,
                                     0.04024806, -0.00794403,  0.05503556,  0.04299663,  0.03218259,
                                     0.04593138,  0.04521856, -0.01352873,  0.03819806,  0.02920964,
                                     0.02204489,  0.04149255,  0.03473236, -0.07695912, -0.02223961,
                                     -0.01203423, -0.00102245,  0.03361589, -0.00025442, -0.12380694,
                                     -0.06696599, -0.05302162, -0.01601252,  0.01145348, -0.01655333,
                                     -0.11769459, -0.09111798, -0.05834968, -0.01986761,  0.00686941,
                                     0.01093219, -0.05878838,  0.06194017,  0.13850504,  0.18900546,
                                     0.17166781,  0.22133643,  0.01155377, -0.06259971, -0.04787081,
                                     -0.04846318, -0.06750003, -0.05431003,  0.00905498, -0.01800784,
                                     -0.03687379, -0.03734352, -0.0440408 , -0.04089496,  0.01337968,
                                     -0.01513298, -0.0280986 , -0.01740918, -0.03054899, -0.01960228,
                                     0.02196499, -0.00897946, -0.03363361, -0.02322488, -0.02169751,
                                     -0.02305664,  0.05273766, -0.00234962, -0.03320375, -0.01895452,
                                     -0.01147789, -0.02409168,  0.07250664,  0.01805336, -0.01981054,
                                     -0.01701743,  0.0005697 , -0.02908984,  0.08820819,  0.03404781,
                                     0.01630259, -0.00549304,  0.01326792, -0.02655343,  0.12434882,
                                     0.05899084,  0.04799603,  0.01770806,  0.00914002, -0.00430142,
                                     0.0866407 ,  0.00119153,  0.02882684,  0.01507479, -0.00430148,
                                     -0.00055211,  0.02263364, -0.04970768, -0.07984375, -0.12389365,
                                     -0.15760027, -0.1548678 ])
    initial_dvs['twist'] = np.array([-0.02383762, -0.00520423, -0.0104341 , -0.00654206, -0.01175685,
                                     0.00156199, -0.04551454])*100.0
    initial_dvs['sweep'] = np.array([ -0.1])*10.0
    initial_dvs['area'] = np.array([ 0.0995238])*10.0

    for key, value in iteritems(initial_dvs):
        prob[key] = value

    prob.run_driver()


    initial_dvs['shape'] = np.array([-0.04662607,  0.0743065 ,  0.05835042,  0.09285859,  0.05564885,
       -0.07457323,  0.06829847, -0.15561994, -0.07720781, -0.13999675,
       -0.12878316, -0.019194  ,  0.02549357, -0.01638694, -0.05483677,
       -0.10413153, -0.09161206, -0.11814163,  0.02955126,  0.03417444,
        0.03472963,  0.05126253,  0.05053573,  0.02396987, -0.00362054,
       -0.01617959,  0.00383355,  0.18393798,  0.02505734,  0.05516549,
        0.08595137,  0.08477846,  0.07200257,  0.05450548,  0.07553242,
        0.03626095,  0.03903912,  0.06198442,  0.03288129,  0.07397158,
        0.10393065,  0.13542128,  0.12744568,  0.07431113,  0.04297829,
        0.02257574,  0.02462815,  0.06618025,  0.05158084,  0.10036356,
       -0.0369228 , -0.01667522, -0.0057269 ,  0.01472026,  0.0250698 ,
        0.04007292,  0.04689921,  0.01468899, -0.02736442, -0.16408873,
       -0.03285431, -0.13550068, -0.1330762 , -0.14913027, -0.17423632,
       -0.13365714, -0.10793092, -0.0628396 , -0.0810305 , -0.11663129,
       -0.14572481, -0.1589989 , -0.01308062,  0.02536368,  0.05300973,
        0.06359328,  0.06655107,  0.04307914, -0.04002068,  0.01812376,
        0.05021099,  0.06250596,  0.05961293,  0.04326678, -0.04627381,
        0.02208361,  0.03392373,  0.03310766,  0.04498323,  0.04332965,
       -0.02024894,  0.03483306,  0.03697328,  0.03278635,  0.04524572,
        0.0402458 , -0.00794177,  0.05503329,  0.04299889,  0.03218032,
        0.04593364,  0.0452163 , -0.01352646,  0.0381958 ,  0.0292119 ,
        0.02204263,  0.04149481,  0.0347301 , -0.07695685, -0.02224187,
       -0.01203197, -0.00102471,  0.03361816, -0.00025668, -0.12380468,
       -0.06696825, -0.05301936, -0.01601478,  0.01145574, -0.01655559,
       -0.11769233, -0.09112024, -0.05834742, -0.01986987,  0.00687167,
        0.01092993, -0.05878612,  0.06193791,  0.1385073 ,  0.1890032 ,
        0.17167007,  0.22133417,  0.01155603, -0.06260198, -0.04786855,
       -0.04846544, -0.06749777, -0.05431229,  0.00905724, -0.0180101 ,
       -0.03687153, -0.03734578, -0.04403854, -0.04089723,  0.01338194,
       -0.01513524, -0.02809634, -0.01741144, -0.03054673, -0.01960454,
        0.02196725, -0.00898172, -0.03363135, -0.02322715, -0.02169525,
       -0.0230589 ,  0.05273992, -0.00235188, -0.03320149, -0.01895678,
       -0.01147563, -0.02409394,  0.0725089 ,  0.0180511 , -0.01980828,
       -0.01701969,  0.00057197, -0.0290921 ,  0.08821045,  0.03404555,
        0.01630485, -0.0054953 ,  0.01327018, -0.02655569,  0.12435108,
        0.05898858,  0.04799829,  0.0177058 ,  0.00914228, -0.00430368,
        0.08664296,  0.00118927,  0.0288291 ,  0.01507253, -0.00429921,
       -0.00055437,  0.0226359 , -0.04970994, -0.07984149, -0.12389591,
       -0.15759801, -0.15487006])
    initial_dvs['twist'] = np.array([-0.02383536, -0.00520649, -0.01043184, -0.00654432, -0.01175459,
        0.00155973, -0.04551228])*100.0
    initial_dvs['sweep'] = np.array([ -0.09999774])*10.0
    initial_dvs['area'] = np.array([ 0.09952606])*10.0

    for key, value in iteritems(initial_dvs):
        prob[key] = value

    prob.run_driver()


    initial_dvs['shape'] = np.array([ -4.66283369e-02,   1.47393984e-01,  -3.48388809e-02,
         3.24547956e-02,  -7.09596917e-02,  -2.12511950e-01,
         1.23166992e-01,  -7.38390062e-02,  -7.72100750e-02,
        -1.39994481e-01,  -1.28785427e-01,   4.46132301e-02,
         9.60122512e-02,   4.98993997e-02,   3.18167197e-03,
        -4.87468635e-02,  -9.16143213e-02,  -1.18139370e-01,
         8.41890665e-02,   3.41767015e-02,   3.47273680e-02,
         5.12647978e-02,   5.05334627e-02,   2.39721305e-02,
        -3.62280645e-03,  -1.61773233e-02,   3.83128649e-03,
         1.99585924e-01,   2.50550750e-02,   5.51677570e-02,
        -4.09853186e-02,  -1.17885561e-01,  -1.18283760e-01,
        -1.15771588e-01,   9.05313767e-03,   3.62632141e-02,
         3.90368564e-02,   6.19866867e-02,   9.09382361e-02,
         1.51442196e-01,   1.03928386e-01,  -1.86159610e-01,
        -4.96743083e-02,   3.66044045e-01,   2.30958032e-01,
         2.25780066e-02,  -7.94061942e-02,   4.63850643e-03,
         5.15785734e-02,   1.00365823e-01,  -3.69250618e-02,
        -1.66729609e-02,  -5.72916682e-03,   1.47225184e-02,
         2.50675390e-02,  -2.80197895e-02,   4.68969480e-02,
         1.46912558e-02,  -8.74203294e-02,  -1.64086462e-01,
        -3.28565683e-02,  -1.35498420e-01,  -1.33078464e-01,
        -1.49128005e-01,  -1.74238580e-01,  -2.14269707e-01,
        -1.88394653e-01,  -6.28373348e-02,  -8.10327630e-02,
        -1.16629025e-01,  -9.11901641e-02,  -7.51526531e-02,
        -1.30828854e-02,   2.53659475e-02,   5.30074674e-02,
         6.35955420e-02,   6.65488121e-02,   4.30813999e-02,
        -4.00229439e-02,   1.81260211e-02,   5.02087281e-02,
         6.25082191e-02,   5.96106652e-02,   4.32690475e-02,
        -4.62760776e-02,   7.20933689e-02,   8.77722836e-02,
         3.31099212e-02,   4.49809649e-02,   4.33319172e-02,
         8.00076236e-02,   1.37772823e-01,   1.28438682e-01,
         1.02322379e-01,   1.03070881e-01,   9.01880151e-02,
         8.66426787e-02,   1.51394806e-01,   1.33861565e-01,
         1.10503050e-01,   1.09564549e-01,   4.52185609e-02,
         6.49833303e-02,   1.08481994e-01,   9.01398945e-02,
         2.20448919e-02,   4.14925506e-02,   3.47323582e-02,
        -5.91300625e-03,   3.00818853e-02,  -1.20342317e-02,
        -1.02244874e-03,   3.36158942e-02,  -2.54416443e-04,
        -6.30292564e-02,  -1.44664922e-02,  -7.04738384e-04,
         3.56607769e-02,   1.14534803e-02,  -1.65533273e-02,
        -1.17694591e-01,  -9.11179797e-02,  -5.83496813e-02,
        -1.98676114e-02,   6.86940576e-03,  -4.64380970e-02,
    -5.87883785e-02,   1.28205500e-02,   1.38505038e-01,
    1.89005465e-01,   1.71667810e-01,   2.21336435e-01,
    -1.46633504e-01,  -1.62003021e-01,  -4.78708104e-02,
        6.53800351e-03,  -1.82685188e-02,  -5.43100292e-02,
    -3.40850348e-01,  -2.44226481e-01,  -1.78839529e-01,
    -1.19755906e-01,  -1.00497660e-01,  -4.08949644e-02,
        1.33796820e-02,   8.01791595e-02,   3.14481976e-02,
    -1.74091810e-02,  -3.05489947e-02,  -1.96022831e-02,
        4.16042297e-01,   2.86090446e-01,   1.72953945e-01,
        1.13267526e-01,   9.39101914e-02,   8.81650626e-02,
        2.01672531e-01,   1.31997098e-01,   1.14228754e-01,
        1.27082649e-01,   1.10087823e-01,  -2.40916833e-02,
    -4.17679895e-02,  -1.18625998e-01,  -1.85888576e-01,
    -1.88870181e-01,  -1.86119377e-01,  -2.35585579e-01,
    -7.01418770e-02,  -1.90018515e-01,  -2.48643936e-01,
    -2.06512812e-01,  -1.04999365e-01,  -2.65534296e-02,
        5.49931136e-02,   9.05609138e-03,   4.79960339e-02,
        1.77080639e-02,   6.73325948e-02,  -4.30141968e-03,
        8.66406987e-02,   1.19153388e-03,   2.88268397e-02,
        1.50747941e-02,  -6.29009028e-02,  -8.09222062e-02,
    -2.64378115e-02,  -9.88291434e-02,  -7.98437531e-02,
    -1.23893651e-01,  -1.57600271e-01,  -1.46979928e-01])
    initial_dvs['twist'] = np.array([ 0.08      ,  0.08      ,  0.08      ,  0.04080994, -0.08      ,
       -0.08      , -0.08      ])*100.0
    initial_dvs['sweep'] = np.array([ 0.07487358])*10.0
    initial_dvs['area'] = np.array([ 0.10082109])*10.0

    for key, value in iteritems(initial_dvs):
        prob[key] = value

    prob.run_driver()

print("Execution Completed!")
